%{
#include<stdio.h>
%}
DIGIT [0-9]
NUMBER {DIGIT}+ 
REAL {DIGIT}*"."{DIGIT}+
TEXT [a-zA-Z]+
TEXT_NUMBERS [a-zA-Z0-9]
CONDITIONALS "if"|"else"|"elseif"|"switch"|"case"
KEYWORD "break"|"continue"|"goto"|"printf"|"scanf"|"fopen"|"int"|"float"|"long"|"double"
ITERATORS "for"|"while"|"do"
PREPROCESSOR "#"|"#include" 
DELIMITER [; :\t\n()"]
IDENTIFIER [a-zA-Z]{TEXT_NUMBERS}*|[a-zA-Z]{TEXT_NUMBERS}*[[{NUMBER}+]]
FILE "<"{IDENTIFIER}.h">"
BLOCK_BEGINS "{"
BLOCK_ENDS "}"
UNARY "++"|"--"
LOPERATOR "&"|"|"|"&&"|"~"|"||"|">"|"<"|">="|"<="|"=="
AOPERATOR "+"|"-"|"*"|"/"|"="
%%
{CONDITIONALS} {printf("%s is a conditional\n",yytext);}
{ITERATORS} {printf("%s is an iterator\n",yytext);}
{DIGIT} {printf("%s is a digit\n",yytext);}
{NUMBER} {printf("%s is a number\n",yytext);}
{REAL} { printf("%s is a real number\n", yytext); }
{PREPROCESSOR} { printf("%s is a preprocessor directive\n", yytext); 
}
{DELIMITER} { printf("%s is a delimiter\n", yytext); }
{KEYWORD} { printf("%s is a keyword\n", yytext); }
{IDENTIFIER} { printf("%s is an identifier\n", yytext); }
{AOPERATOR} { printf("%s is a mathematical operator\n", yytext); }
{LOPERATOR} { printf("%s is a logical operator\n", yytext); }
{BLOCK_BEGINS} { printf("%s Block begins\n", yytext); }
{BLOCK_ENDS} { printf("%s Block ends\n", yytext); }
{FILE} { printf("%s is a file\n", yytext); }
{UNARY} { printf("%s is a unary operator\n", yytext); }
%%
int yywrap(){}
int main(int argc, char *argv[]) {
extern FILE *yyin;
yyin = fopen(argv[1],"r");
yylex();
return 0;
}





